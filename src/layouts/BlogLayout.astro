---
import "../../styles/global.css";
import "../../styles/index.scss";

import Head from "../components/Utils/head.astro";
import Header from "../components/Shared/Header.astro";
import Footer from "../components/Shared/Footer.astro";

const { showFooter = true, stickyHeader = true } = Astro.props;
---

<html lang="en" class="scroll-smooth">
    <Head />
    <style>
        body {
            background-image: url("@assets/media/images/noise_background_2.png");
            background-size: auto;
            background-position: center;
            background-repeat: repeat;
            background-blend-mode: color-burn;
        }
    </style>
    <body
        class="bg-gray-100 text-gray-900 dark:bg-gray-900 dark:text-gray-100 transition-colors duration-500 space-y-8"
    >
        <Header stickyHeader={stickyHeader} />
        <slot />

        {showFooter && <Footer />}
        <script is:client src="https://unpkg.com/aos@next/dist/aos.js"></script>
        <script is:client>
            AOS.init();
        </script>

        <script is:client>
            const bgComplement = document.querySelector(".bg-complement");
            const bgComplementContainer = document.querySelector(
                ".bg-complement-container",
            );

            let gradosX = 50;
            let gradosY = 33;
            let scale = 1;
            let growing = true;
            let positionComplementContainer;

            let bgAnimation;

            const xSet = gsap.quickSetter(bgComplement, "rotationX", "deg");
            const ySet = gsap.quickSetter(bgComplement, "rotationY", "deg");

            const setScaleX = gsap.quickSetter(bgComplementContainer, "scaleX");
            const setScaleY = gsap.quickSetter(bgComplementContainer, "scaleY");
            const scaleSet = (val) => {
                setScaleX(val);
                setScaleY(val);
            };

            const yPositionSet = gsap.quickSetter(
                bgComplementContainer,
                "y",
                "px",
            );

            const transformer = gsap.utils.pipe(gsap.utils.clamp(0, 200));

            function animateComplement() {
                if (gradosY === 393 || gradosY > 393) gradosY = 33;
                if (gradosX === 410 || gradosX > 410) gradosX = 50;
                scaleSet(scale);
                ySet(gradosY);
                xSet(gradosX);
                gradosY += 1;
                gradosX += 0.2;
            }

            const animateHome = () => {
                bgAnimation = gsap.timeline({
                    repeat: -1,
                    onUpdate: animateComplement,
                    delay: 1,
                });
            };

            const desAnimateHome = () => {
                bgAnimation.kill();
            };

            animateHome();
            desAnimateHome();

            const windowPosX = window.innerWidth / 2;
            const windowPosY = window.innerHeight / 2;

            let mouseX = 0;
            let mouseY = 0;

            let targetX = 0;
            let targetY = 0;

            function onDocumentMouseMove(event) {
                mouseX = event.clientX - windowPosX;
                mouseY = event.clientY - windowPosY;

                targetX = mouseX * 0.001;
                targetY = mouseY * 0.001;

                gradosX = gsap.getProperty(bgComplement, "rotateX");
                gradosY = gsap.getProperty(bgComplement, "rotateY");

                gradosX += -0.001 * (targetY - gradosX);
                gradosY += -0.001 * (targetX - gradosY);

                if (!growing) {
                    scale += 0.00003 * (targetY - gradosX);
                    if (scale < 1) growing = !growing;
                }
                if (growing) {
                    scale += -0.00003 * (targetY - gradosX);
                    if (scale > 2) growing = !growing;
                }
            }

            function updateComplement() {
                positionComplementContainer =
                    (window.scrollY - window.scrollMaxY) * -0.7;
                yPositionSet(transformer(positionComplementContainer));
            }

            // Se activa cuando se estÃ¡ visualizando

            if (location.pathname == "/") {
                console.log(document.getElementById("home"));
                document.getElementById("home").removeAttribute("hidden");
                gsap.from(bgComplementContainer, {
                    scale: 0,
                    duration: 1,
                    ease: "power2.inOut",
                    transformOrigin: "center center",
                });
                ScrollTrigger.create({
                    trigger: ".home",
                    start: "top center",
                    end: "top+=100 top",
                    onToggle: (self) => {
                        if (self.isActive) {
                            animateHome();
                            window.addEventListener(
                                "mousemove",
                                onDocumentMouseMove,
                            );
                            document.addEventListener(
                                "scroll",
                                updateComplement,
                            );
                        } else {
                            desAnimateHome();
                            window.removeEventListener(
                                "mousemove",
                                onDocumentMouseMove,
                            );
                            document.removeEventListener(
                                "scroll",
                                updateComplement,
                            );
                        }
                    },
                });
            }
        </script>
    </body>
</html>
